// Code generated by goa v3.4.3, DO NOT EDIT.
//
// user service
//
// Command:
// $ goa gen github.com/mateeullahmalik/goa-demo/api/design

package user

import (
	"context"

	userviews "github.com/mateeullahmalik/goa-demo/api/gen/user/views"
)

// The user service makes it possible to view, add or remove users
type Service interface {
	// List all stored users
	ListUsers(context.Context) (res UserCollection, err error)
	// get user by ID
	// The "view" return value must have one of the following views
	//	- "default"
	//	- "tiny"
	GetUser(context.Context, *GetUserPayload) (res *User, view string, err error)
	// create new user and return its ID.
	CreateUser(context.Context, *User) (res string, err error)
	// Remove user
	RemoveUser(context.Context, *RemoveUserPayload) (err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "user"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [4]string{"listUsers", "getUser", "createUser", "removeUser"}

// UserCollection is the result type of the user service listUsers method.
type UserCollection []*User

// GetUserPayload is the payload type of the user service getUser method.
type GetUserPayload struct {
	// ID of user to show
	ID string
	// View to render
	View *string
}

// User is the result type of the user service getUser method.
type User struct {
	// ID is the unique id of the user.
	ID int
	// Full Name of the user
	Name string
	// email address of user
	Email string
	// Score is user's loan score
	Score *int
}

// RemoveUserPayload is the payload type of the user service removeUser method.
type RemoveUserPayload struct {
	// ID of user to remove
	ID string
}

// NotFound is the type returned when attempting to show or delete a resource
// that does not exist.
type NotFound struct {
	// Message of error
	Message string
	// ID of missing resource
	ID string
}

// Error returns an error description.
func (e *NotFound) Error() string {
	return "NotFound is the type returned when attempting to show or delete a resource that does not exist."
}

// ErrorName returns "NotFound".
func (e *NotFound) ErrorName() string {
	return e.Message
}

// NewUserCollection initializes result type UserCollection from viewed result
// type UserCollection.
func NewUserCollection(vres userviews.UserCollection) UserCollection {
	var res UserCollection
	switch vres.View {
	case "default", "":
		res = newUserCollection(vres.Projected)
	case "tiny":
		res = newUserCollectionTiny(vres.Projected)
	}
	return res
}

// NewViewedUserCollection initializes viewed result type UserCollection from
// result type UserCollection using the given view.
func NewViewedUserCollection(res UserCollection, view string) userviews.UserCollection {
	var vres userviews.UserCollection
	switch view {
	case "default", "":
		p := newUserCollectionView(res)
		vres = userviews.UserCollection{Projected: p, View: "default"}
	case "tiny":
		p := newUserCollectionViewTiny(res)
		vres = userviews.UserCollection{Projected: p, View: "tiny"}
	}
	return vres
}

// NewUser initializes result type User from viewed result type User.
func NewUser(vres *userviews.User) *User {
	var res *User
	switch vres.View {
	case "default", "":
		res = newUser(vres.Projected)
	case "tiny":
		res = newUserTiny(vres.Projected)
	}
	return res
}

// NewViewedUser initializes viewed result type User from result type User
// using the given view.
func NewViewedUser(res *User, view string) *userviews.User {
	var vres *userviews.User
	switch view {
	case "default", "":
		p := newUserView(res)
		vres = &userviews.User{Projected: p, View: "default"}
	case "tiny":
		p := newUserViewTiny(res)
		vres = &userviews.User{Projected: p, View: "tiny"}
	}
	return vres
}

// newUserCollection converts projected type UserCollection to service type
// UserCollection.
func newUserCollection(vres userviews.UserCollectionView) UserCollection {
	res := make(UserCollection, len(vres))
	for i, n := range vres {
		res[i] = newUser(n)
	}
	return res
}

// newUserCollectionTiny converts projected type UserCollection to service type
// UserCollection.
func newUserCollectionTiny(vres userviews.UserCollectionView) UserCollection {
	res := make(UserCollection, len(vres))
	for i, n := range vres {
		res[i] = newUserTiny(n)
	}
	return res
}

// newUserCollectionView projects result type UserCollection to projected type
// UserCollectionView using the "default" view.
func newUserCollectionView(res UserCollection) userviews.UserCollectionView {
	vres := make(userviews.UserCollectionView, len(res))
	for i, n := range res {
		vres[i] = newUserView(n)
	}
	return vres
}

// newUserCollectionViewTiny projects result type UserCollection to projected
// type UserCollectionView using the "tiny" view.
func newUserCollectionViewTiny(res UserCollection) userviews.UserCollectionView {
	vres := make(userviews.UserCollectionView, len(res))
	for i, n := range res {
		vres[i] = newUserViewTiny(n)
	}
	return vres
}

// newUser converts projected type User to service type User.
func newUser(vres *userviews.UserView) *User {
	res := &User{
		Score: vres.Score,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.Email != nil {
		res.Email = *vres.Email
	}
	return res
}

// newUserTiny converts projected type User to service type User.
func newUserTiny(vres *userviews.UserView) *User {
	res := &User{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	return res
}

// newUserView projects result type User to projected type UserView using the
// "default" view.
func newUserView(res *User) *userviews.UserView {
	vres := &userviews.UserView{
		ID:    &res.ID,
		Name:  &res.Name,
		Email: &res.Email,
		Score: res.Score,
	}
	return vres
}

// newUserViewTiny projects result type User to projected type UserView using
// the "tiny" view.
func newUserViewTiny(res *User) *userviews.UserView {
	vres := &userviews.UserView{
		ID:   &res.ID,
		Name: &res.Name,
	}
	return vres
}
