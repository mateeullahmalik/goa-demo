// Code generated by goa v3.4.3, DO NOT EDIT.
//
// user views
//
// Command:
// $ goa gen github.com/mateeullahmalik/goa-demo/api/design

package views

import (
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// UserCollection is the viewed result type that is projected based on a view.
type UserCollection struct {
	// Type to project
	Projected UserCollectionView
	// View to render
	View string
}

// User is the viewed result type that is projected based on a view.
type User struct {
	// Type to project
	Projected *UserView
	// View to render
	View string
}

// UserCollectionView is a type that runs validations on a projected type.
type UserCollectionView []*UserView

// UserView is a type that runs validations on a projected type.
type UserView struct {
	// ID is the unique id of the user.
	ID *int
	// Full Name of the user
	Name *string
	// email address of user
	Email *string
	// Score is user's loan score
	Score *int
}

var (
	// UserCollectionMap is a map of attribute names in result type UserCollection
	// indexed by view name.
	UserCollectionMap = map[string][]string{
		"default": []string{
			"id",
			"score",
			"name",
			"email",
		},
		"tiny": []string{
			"id",
			"name",
		},
	}
	// UserMap is a map of attribute names in result type User indexed by view name.
	UserMap = map[string][]string{
		"default": []string{
			"id",
			"score",
			"name",
			"email",
		},
		"tiny": []string{
			"id",
			"name",
		},
	}
)

// ValidateUserCollection runs the validations defined on the viewed result
// type UserCollection.
func ValidateUserCollection(result UserCollection) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateUserCollectionView(result.Projected)
	case "tiny":
		err = ValidateUserCollectionViewTiny(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default", "tiny"})
	}
	return
}

// ValidateUser runs the validations defined on the viewed result type User.
func ValidateUser(result *User) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateUserView(result.Projected)
	case "tiny":
		err = ValidateUserViewTiny(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default", "tiny"})
	}
	return
}

// ValidateUserCollectionView runs the validations defined on
// UserCollectionView using the "default" view.
func ValidateUserCollectionView(result UserCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateUserView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateUserCollectionViewTiny runs the validations defined on
// UserCollectionView using the "tiny" view.
func ValidateUserCollectionViewTiny(result UserCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateUserViewTiny(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateUserView runs the validations defined on UserView using the
// "default" view.
func ValidateUserView(result *UserView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "result"))
	}
	if result.Score != nil {
		if *result.Score < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("result.score", *result.Score, 0, true))
		}
	}
	if result.Score != nil {
		if *result.Score > 1000 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("result.score", *result.Score, 1000, false))
		}
	}
	if result.Name != nil {
		if utf8.RuneCountInString(*result.Name) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.name", *result.Name, utf8.RuneCountInString(*result.Name), 3, true))
		}
	}
	if result.Name != nil {
		if utf8.RuneCountInString(*result.Name) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.name", *result.Name, utf8.RuneCountInString(*result.Name), 128, false))
		}
	}
	return
}

// ValidateUserViewTiny runs the validations defined on UserView using the
// "tiny" view.
func ValidateUserViewTiny(result *UserView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Name != nil {
		if utf8.RuneCountInString(*result.Name) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.name", *result.Name, utf8.RuneCountInString(*result.Name), 3, true))
		}
	}
	if result.Name != nil {
		if utf8.RuneCountInString(*result.Name) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.name", *result.Name, utf8.RuneCountInString(*result.Name), 128, false))
		}
	}
	return
}
