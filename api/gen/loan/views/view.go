// Code generated by goa v3.4.3, DO NOT EDIT.
//
// loan views
//
// Command:
// $ goa gen github.com/mateeullahmalik/goa-demo/api/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// LoanCollection is the viewed result type that is projected based on a view.
type LoanCollection struct {
	// Type to project
	Projected LoanCollectionView
	// View to render
	View string
}

// Loan is the viewed result type that is projected based on a view.
type Loan struct {
	// Type to project
	Projected *LoanView
	// View to render
	View string
}

// LoanCollectionView is a type that runs validations on a projected type.
type LoanCollectionView []*LoanView

// LoanView is a type that runs validations on a projected type.
type LoanView struct {
	// ID is the unique id of the loan
	ID *int
	// Loan amount
	Amount *float64
	// id of lender
	LenderID *int
	// id of borrower
	BorrowerID *int
	// description
	Description *string
	// Date on which the loan is supposed to be paid back
	PaybackDate *string
}

var (
	// LoanCollectionMap is a map of attribute names in result type LoanCollection
	// indexed by view name.
	LoanCollectionMap = map[string][]string{
		"default": []string{
			"id",
			"amount",
			"lender_id",
			"borrower_id",
			"description",
			"payback_date",
		},
		"tiny": []string{
			"id",
			"amount",
			"lender_id",
			"borrower_id",
		},
	}
	// LoanMap is a map of attribute names in result type Loan indexed by view name.
	LoanMap = map[string][]string{
		"default": []string{
			"id",
			"amount",
			"lender_id",
			"borrower_id",
			"description",
			"payback_date",
		},
		"tiny": []string{
			"id",
			"amount",
			"lender_id",
			"borrower_id",
		},
	}
)

// ValidateLoanCollection runs the validations defined on the viewed result
// type LoanCollection.
func ValidateLoanCollection(result LoanCollection) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateLoanCollectionView(result.Projected)
	case "tiny":
		err = ValidateLoanCollectionViewTiny(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default", "tiny"})
	}
	return
}

// ValidateLoan runs the validations defined on the viewed result type Loan.
func ValidateLoan(result *Loan) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateLoanView(result.Projected)
	case "tiny":
		err = ValidateLoanViewTiny(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default", "tiny"})
	}
	return
}

// ValidateLoanCollectionView runs the validations defined on
// LoanCollectionView using the "default" view.
func ValidateLoanCollectionView(result LoanCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateLoanView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateLoanCollectionViewTiny runs the validations defined on
// LoanCollectionView using the "tiny" view.
func ValidateLoanCollectionViewTiny(result LoanCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateLoanViewTiny(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateLoanView runs the validations defined on LoanView using the
// "default" view.
func ValidateLoanView(result *LoanView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Amount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("amount", "result"))
	}
	if result.LenderID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("lender_id", "result"))
	}
	if result.BorrowerID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("borrower_id", "result"))
	}
	if result.Amount != nil {
		if *result.Amount < 50 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("result.amount", *result.Amount, 50, true))
		}
	}
	if result.Amount != nil {
		if *result.Amount > 500 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("result.amount", *result.Amount, 500, false))
		}
	}
	return
}

// ValidateLoanViewTiny runs the validations defined on LoanView using the
// "tiny" view.
func ValidateLoanViewTiny(result *LoanView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Amount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("amount", "result"))
	}
	if result.LenderID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("lender_id", "result"))
	}
	if result.BorrowerID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("borrower_id", "result"))
	}
	if result.Amount != nil {
		if *result.Amount < 50 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("result.amount", *result.Amount, 50, true))
		}
	}
	if result.Amount != nil {
		if *result.Amount > 500 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("result.amount", *result.Amount, 500, false))
		}
	}
	return
}
