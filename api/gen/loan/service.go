// Code generated by goa v3.4.3, DO NOT EDIT.
//
// loan service
//
// Command:
// $ goa gen github.com/mateeullahmalik/goa-demo/api/design

package loan

import (
	"context"

	loanviews "github.com/mateeullahmalik/goa-demo/api/gen/loan/views"
)

// The loan service makes it possible to view, add or remove loans
type Service interface {
	// List all stored loans
	ListLoans(context.Context) (res LoanCollection, err error)
	// get loan by ID
	// The "view" return value must have one of the following views
	//	- "default"
	//	- "tiny"
	GetLoan(context.Context, *GetLoanPayload) (res *Loan, view string, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "loan"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [2]string{"listLoans", "getLoan"}

// LoanCollection is the result type of the loan service listLoans method.
type LoanCollection []*Loan

// GetLoanPayload is the payload type of the loan service getLoan method.
type GetLoanPayload struct {
	// ID of loan to show
	ID int
	// View to render
	View string
}

// Loan is the result type of the loan service getLoan method.
type Loan struct {
	// ID is the unique id of the loan
	ID int
	// Loan amount
	Amount float64
	// id of lender
	LenderID int
	// id of borrower
	BorrowerID int
	// description
	Description *string
	// Date on which the loan is supposed to be paid back
	PaybackDate *string
}

// NotFound is the type returned when attempting to show or delete a resource
// that does not exist.
type NotFound struct {
	// Message of error
	Message string
	// ID of missing resource
	ID string
}

// Error returns an error description.
func (e *NotFound) Error() string {
	return "NotFound is the type returned when attempting to show or delete a resource that does not exist."
}

// ErrorName returns "NotFound".
func (e *NotFound) ErrorName() string {
	return e.Message
}

// NewLoanCollection initializes result type LoanCollection from viewed result
// type LoanCollection.
func NewLoanCollection(vres loanviews.LoanCollection) LoanCollection {
	var res LoanCollection
	switch vres.View {
	case "default", "":
		res = newLoanCollection(vres.Projected)
	case "tiny":
		res = newLoanCollectionTiny(vres.Projected)
	}
	return res
}

// NewViewedLoanCollection initializes viewed result type LoanCollection from
// result type LoanCollection using the given view.
func NewViewedLoanCollection(res LoanCollection, view string) loanviews.LoanCollection {
	var vres loanviews.LoanCollection
	switch view {
	case "default", "":
		p := newLoanCollectionView(res)
		vres = loanviews.LoanCollection{Projected: p, View: "default"}
	case "tiny":
		p := newLoanCollectionViewTiny(res)
		vres = loanviews.LoanCollection{Projected: p, View: "tiny"}
	}
	return vres
}

// NewLoan initializes result type Loan from viewed result type Loan.
func NewLoan(vres *loanviews.Loan) *Loan {
	var res *Loan
	switch vres.View {
	case "default", "":
		res = newLoan(vres.Projected)
	case "tiny":
		res = newLoanTiny(vres.Projected)
	}
	return res
}

// NewViewedLoan initializes viewed result type Loan from result type Loan
// using the given view.
func NewViewedLoan(res *Loan, view string) *loanviews.Loan {
	var vres *loanviews.Loan
	switch view {
	case "default", "":
		p := newLoanView(res)
		vres = &loanviews.Loan{Projected: p, View: "default"}
	case "tiny":
		p := newLoanViewTiny(res)
		vres = &loanviews.Loan{Projected: p, View: "tiny"}
	}
	return vres
}

// newLoanCollection converts projected type LoanCollection to service type
// LoanCollection.
func newLoanCollection(vres loanviews.LoanCollectionView) LoanCollection {
	res := make(LoanCollection, len(vres))
	for i, n := range vres {
		res[i] = newLoan(n)
	}
	return res
}

// newLoanCollectionTiny converts projected type LoanCollection to service type
// LoanCollection.
func newLoanCollectionTiny(vres loanviews.LoanCollectionView) LoanCollection {
	res := make(LoanCollection, len(vres))
	for i, n := range vres {
		res[i] = newLoanTiny(n)
	}
	return res
}

// newLoanCollectionView projects result type LoanCollection to projected type
// LoanCollectionView using the "default" view.
func newLoanCollectionView(res LoanCollection) loanviews.LoanCollectionView {
	vres := make(loanviews.LoanCollectionView, len(res))
	for i, n := range res {
		vres[i] = newLoanView(n)
	}
	return vres
}

// newLoanCollectionViewTiny projects result type LoanCollection to projected
// type LoanCollectionView using the "tiny" view.
func newLoanCollectionViewTiny(res LoanCollection) loanviews.LoanCollectionView {
	vres := make(loanviews.LoanCollectionView, len(res))
	for i, n := range res {
		vres[i] = newLoanViewTiny(n)
	}
	return vres
}

// newLoan converts projected type Loan to service type Loan.
func newLoan(vres *loanviews.LoanView) *Loan {
	res := &Loan{
		Description: vres.Description,
		PaybackDate: vres.PaybackDate,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Amount != nil {
		res.Amount = *vres.Amount
	}
	if vres.LenderID != nil {
		res.LenderID = *vres.LenderID
	}
	if vres.BorrowerID != nil {
		res.BorrowerID = *vres.BorrowerID
	}
	return res
}

// newLoanTiny converts projected type Loan to service type Loan.
func newLoanTiny(vres *loanviews.LoanView) *Loan {
	res := &Loan{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Amount != nil {
		res.Amount = *vres.Amount
	}
	if vres.LenderID != nil {
		res.LenderID = *vres.LenderID
	}
	if vres.BorrowerID != nil {
		res.BorrowerID = *vres.BorrowerID
	}
	return res
}

// newLoanView projects result type Loan to projected type LoanView using the
// "default" view.
func newLoanView(res *Loan) *loanviews.LoanView {
	vres := &loanviews.LoanView{
		ID:          &res.ID,
		Amount:      &res.Amount,
		LenderID:    &res.LenderID,
		BorrowerID:  &res.BorrowerID,
		Description: res.Description,
		PaybackDate: res.PaybackDate,
	}
	return vres
}

// newLoanViewTiny projects result type Loan to projected type LoanView using
// the "tiny" view.
func newLoanViewTiny(res *Loan) *loanviews.LoanView {
	vres := &loanviews.LoanView{
		ID:         &res.ID,
		Amount:     &res.Amount,
		LenderID:   &res.LenderID,
		BorrowerID: &res.BorrowerID,
	}
	return vres
}
