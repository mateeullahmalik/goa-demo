// Code generated by goa v3.4.3, DO NOT EDIT.
//
// loan endpoints
//
// Command:
// $ goa gen github.com/mateeullahmalik/goa-demo/api/design

package loan

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "loan" service endpoints.
type Endpoints struct {
	ListLoans goa.Endpoint
	GetLoan   goa.Endpoint
}

// NewEndpoints wraps the methods of the "loan" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		ListLoans: NewListLoansEndpoint(s),
		GetLoan:   NewGetLoanEndpoint(s),
	}
}

// Use applies the given middleware to all the "loan" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.ListLoans = m(e.ListLoans)
	e.GetLoan = m(e.GetLoan)
}

// NewListLoansEndpoint returns an endpoint function that calls the method
// "listLoans" of service "loan".
func NewListLoansEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		res, err := s.ListLoans(ctx)
		if err != nil {
			return nil, err
		}
		vres := NewViewedLoanCollection(res, "tiny")
		return vres, nil
	}
}

// NewGetLoanEndpoint returns an endpoint function that calls the method
// "getLoan" of service "loan".
func NewGetLoanEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*GetLoanPayload)
		res, view, err := s.GetLoan(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedLoan(res, view)
		return vres, nil
	}
}
