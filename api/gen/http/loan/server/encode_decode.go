// Code generated by goa v3.4.3, DO NOT EDIT.
//
// loan HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/mateeullahmalik/goa-demo/api/design

package server

import (
	"context"
	"net/http"
	"strconv"

	loan "github.com/mateeullahmalik/goa-demo/api/gen/loan"
	loanviews "github.com/mateeullahmalik/goa-demo/api/gen/loan/views"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeListLoansResponse returns an encoder for responses returned by the
// loan listLoans endpoint.
func EncodeListLoansResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(loanviews.LoanCollection)
		enc := encoder(ctx, w)
		body := NewLoanResponseTinyCollection(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeGetLoanResponse returns an encoder for responses returned by the loan
// getLoan endpoint.
func EncodeGetLoanResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*loanviews.Loan)
		w.Header().Set("goa-view", res.View)
		enc := encoder(ctx, w)
		var body interface{}
		switch res.View {
		case "default", "":
			body = NewGetLoanResponseBody(res.Projected)
		case "tiny":
			body = NewGetLoanResponseBodyTiny(res.Projected)
		}
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetLoanRequest returns a decoder for requests sent to the loan getLoan
// endpoint.
func DecodeGetLoanRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			id   int
			view string
			err  error

			params = mux.Vars(r)
		)
		{
			idRaw := params["id"]
			v, err2 := strconv.ParseInt(idRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("id", idRaw, "integer"))
			}
			id = int(v)
		}
		viewRaw := r.URL.Query().Get("view")
		if viewRaw != "" {
			view = viewRaw
		} else {
			view = "default"
		}
		if !(view == "default" || view == "tiny") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("view", view, []interface{}{"default", "tiny"}))
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetLoanPayload(id, view)

		return payload, nil
	}
}

// EncodeGetLoanError returns an encoder for errors returned by the getLoan
// loan endpoint.
func EncodeGetLoanError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "not_found":
			res := v.(*loan.NotFound)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetLoanNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// marshalLoanviewsLoanViewToLoanResponseTiny builds a value of type
// *LoanResponseTiny from a value of type *loanviews.LoanView.
func marshalLoanviewsLoanViewToLoanResponseTiny(v *loanviews.LoanView) *LoanResponseTiny {
	res := &LoanResponseTiny{
		ID:         *v.ID,
		Amount:     *v.Amount,
		LenderID:   *v.LenderID,
		BorrowerID: *v.BorrowerID,
	}

	return res
}
