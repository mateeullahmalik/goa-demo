// Code generated by goa v3.4.3, DO NOT EDIT.
//
// loan HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/mateeullahmalik/goa-demo/api/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	loan "github.com/mateeullahmalik/goa-demo/api/gen/loan"
	loanviews "github.com/mateeullahmalik/goa-demo/api/gen/loan/views"
	goahttp "goa.design/goa/v3/http"
)

// BuildListLoansRequest instantiates a HTTP request object with method and
// path set to call the "loan" service "listLoans" endpoint
func (c *Client) BuildListLoansRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListLoansLoanPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("loan", "listLoans", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeListLoansResponse returns a decoder for responses returned by the loan
// listLoans endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeListLoansResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListLoansResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("loan", "listLoans", err)
			}
			p := NewListLoansLoanCollectionOK(body)
			view := "tiny"
			vres := loanviews.LoanCollection{Projected: p, View: view}
			if err = loanviews.ValidateLoanCollection(vres); err != nil {
				return nil, goahttp.ErrValidationError("loan", "listLoans", err)
			}
			res := loan.NewLoanCollection(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("loan", "listLoans", resp.StatusCode, string(body))
		}
	}
}

// BuildGetLoanRequest instantiates a HTTP request object with method and path
// set to call the "loan" service "getLoan" endpoint
func (c *Client) BuildGetLoanRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id int
	)
	{
		p, ok := v.(*loan.GetLoanPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("loan", "getLoan", "*loan.GetLoanPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetLoanLoanPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("loan", "getLoan", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetLoanRequest returns an encoder for requests sent to the loan
// getLoan server.
func EncodeGetLoanRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*loan.GetLoanPayload)
		if !ok {
			return goahttp.ErrInvalidType("loan", "getLoan", "*loan.GetLoanPayload", v)
		}
		values := req.URL.Query()
		values.Add("view", p.View)
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeGetLoanResponse returns a decoder for responses returned by the loan
// getLoan endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeGetLoanResponse may return the following errors:
//	- "not_found" (type *loan.NotFound): http.StatusNotFound
//	- error: internal error
func DecodeGetLoanResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetLoanResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("loan", "getLoan", err)
			}
			p := NewGetLoanLoanOK(&body)
			view := resp.Header.Get("goa-view")
			vres := &loanviews.Loan{Projected: p, View: view}
			if err = loanviews.ValidateLoan(vres); err != nil {
				return nil, goahttp.ErrValidationError("loan", "getLoan", err)
			}
			res := loan.NewLoan(vres)
			return res, nil
		case http.StatusNotFound:
			var (
				body GetLoanNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("loan", "getLoan", err)
			}
			err = ValidateGetLoanNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("loan", "getLoan", err)
			}
			return nil, NewGetLoanNotFound(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("loan", "getLoan", resp.StatusCode, string(body))
		}
	}
}

// unmarshalLoanResponseToLoanviewsLoanView builds a value of type
// *loanviews.LoanView from a value of type *LoanResponse.
func unmarshalLoanResponseToLoanviewsLoanView(v *LoanResponse) *loanviews.LoanView {
	res := &loanviews.LoanView{
		ID:          v.ID,
		Amount:      v.Amount,
		LenderID:    v.LenderID,
		BorrowerID:  v.BorrowerID,
		Description: v.Description,
		PaybackDate: v.PaybackDate,
	}

	return res
}
