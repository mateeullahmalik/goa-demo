// Code generated by goa v3.4.3, DO NOT EDIT.
//
// loan HTTP client types
//
// Command:
// $ goa gen github.com/mateeullahmalik/goa-demo/api/design

package client

import (
	loan "github.com/mateeullahmalik/goa-demo/api/gen/loan"
	loanviews "github.com/mateeullahmalik/goa-demo/api/gen/loan/views"
	goa "goa.design/goa/v3/pkg"
)

// ListLoansResponseBody is the type of the "loan" service "listLoans" endpoint
// HTTP response body.
type ListLoansResponseBody []*LoanResponse

// GetLoanResponseBody is the type of the "loan" service "getLoan" endpoint
// HTTP response body.
type GetLoanResponseBody struct {
	// ID is the unique id of the loan
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Loan amount
	Amount *float64 `form:"amount,omitempty" json:"amount,omitempty" xml:"amount,omitempty"`
	// id of lender
	LenderID *int `form:"lender_id,omitempty" json:"lender_id,omitempty" xml:"lender_id,omitempty"`
	// id of borrower
	BorrowerID *int `form:"borrower_id,omitempty" json:"borrower_id,omitempty" xml:"borrower_id,omitempty"`
	// description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Date on which the loan is supposed to be paid back
	PaybackDate *string `form:"payback_date,omitempty" json:"payback_date,omitempty" xml:"payback_date,omitempty"`
}

// GetLoanNotFoundResponseBody is the type of the "loan" service "getLoan"
// endpoint HTTP response body for the "not_found" error.
type GetLoanNotFoundResponseBody struct {
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// ID of missing resource
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// LoanResponse is used to define fields on response body types.
type LoanResponse struct {
	// ID is the unique id of the loan
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Loan amount
	Amount *float64 `form:"amount,omitempty" json:"amount,omitempty" xml:"amount,omitempty"`
	// id of lender
	LenderID *int `form:"lender_id,omitempty" json:"lender_id,omitempty" xml:"lender_id,omitempty"`
	// id of borrower
	BorrowerID *int `form:"borrower_id,omitempty" json:"borrower_id,omitempty" xml:"borrower_id,omitempty"`
	// description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Date on which the loan is supposed to be paid back
	PaybackDate *string `form:"payback_date,omitempty" json:"payback_date,omitempty" xml:"payback_date,omitempty"`
}

// NewListLoansLoanCollectionOK builds a "loan" service "listLoans" endpoint
// result from a HTTP "OK" response.
func NewListLoansLoanCollectionOK(body ListLoansResponseBody) loanviews.LoanCollectionView {
	v := make([]*loanviews.LoanView, len(body))
	for i, val := range body {
		v[i] = unmarshalLoanResponseToLoanviewsLoanView(val)
	}

	return v
}

// NewGetLoanLoanOK builds a "loan" service "getLoan" endpoint result from a
// HTTP "OK" response.
func NewGetLoanLoanOK(body *GetLoanResponseBody) *loanviews.LoanView {
	v := &loanviews.LoanView{
		ID:          body.ID,
		Amount:      body.Amount,
		LenderID:    body.LenderID,
		BorrowerID:  body.BorrowerID,
		Description: body.Description,
		PaybackDate: body.PaybackDate,
	}

	return v
}

// NewGetLoanNotFound builds a loan service getLoan endpoint not_found error.
func NewGetLoanNotFound(body *GetLoanNotFoundResponseBody) *loan.NotFound {
	v := &loan.NotFound{
		Message: *body.Message,
		ID:      *body.ID,
	}

	return v
}

// ValidateGetLoanNotFoundResponseBody runs the validations defined on
// getLoan_not_found_response_body
func ValidateGetLoanNotFoundResponseBody(body *GetLoanNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	return
}

// ValidateLoanResponse runs the validations defined on LoanResponse
func ValidateLoanResponse(body *LoanResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Amount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("amount", "body"))
	}
	if body.LenderID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("lender_id", "body"))
	}
	if body.BorrowerID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("borrower_id", "body"))
	}
	if body.Amount != nil {
		if *body.Amount < 50 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.amount", *body.Amount, 50, true))
		}
	}
	if body.Amount != nil {
		if *body.Amount > 500 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.amount", *body.Amount, 500, false))
		}
	}
	return
}
