// Code generated by goa v3.4.3, DO NOT EDIT.
//
// demo HTTP client CLI support package
//
// Command:
// $ goa gen github.com/mateeullahmalik/goa-demo/api/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	loanc "github.com/mateeullahmalik/goa-demo/api/gen/http/loan/client"
	userc "github.com/mateeullahmalik/goa-demo/api/gen/http/user/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `loan (list-loans|get-loan)
user (list-users|get-user|create-user|remove-user)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` loan list-loans` + "\n" +
		os.Args[0] + ` user list-users` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		loanFlags = flag.NewFlagSet("loan", flag.ContinueOnError)

		loanListLoansFlags = flag.NewFlagSet("list-loans", flag.ExitOnError)

		loanGetLoanFlags    = flag.NewFlagSet("get-loan", flag.ExitOnError)
		loanGetLoanIDFlag   = loanGetLoanFlags.String("id", "REQUIRED", "ID of loan to show")
		loanGetLoanViewFlag = loanGetLoanFlags.String("view", "default", "")

		userFlags = flag.NewFlagSet("user", flag.ContinueOnError)

		userListUsersFlags = flag.NewFlagSet("list-users", flag.ExitOnError)

		userGetUserFlags    = flag.NewFlagSet("get-user", flag.ExitOnError)
		userGetUserIDFlag   = userGetUserFlags.String("id", "REQUIRED", "ID of user to show")
		userGetUserViewFlag = userGetUserFlags.String("view", "", "")

		userCreateUserFlags    = flag.NewFlagSet("create-user", flag.ExitOnError)
		userCreateUserBodyFlag = userCreateUserFlags.String("body", "REQUIRED", "")

		userRemoveUserFlags  = flag.NewFlagSet("remove-user", flag.ExitOnError)
		userRemoveUserIDFlag = userRemoveUserFlags.String("id", "REQUIRED", "ID of user to remove")
	)
	loanFlags.Usage = loanUsage
	loanListLoansFlags.Usage = loanListLoansUsage
	loanGetLoanFlags.Usage = loanGetLoanUsage

	userFlags.Usage = userUsage
	userListUsersFlags.Usage = userListUsersUsage
	userGetUserFlags.Usage = userGetUserUsage
	userCreateUserFlags.Usage = userCreateUserUsage
	userRemoveUserFlags.Usage = userRemoveUserUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "loan":
			svcf = loanFlags
		case "user":
			svcf = userFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "loan":
			switch epn {
			case "list-loans":
				epf = loanListLoansFlags

			case "get-loan":
				epf = loanGetLoanFlags

			}

		case "user":
			switch epn {
			case "list-users":
				epf = userListUsersFlags

			case "get-user":
				epf = userGetUserFlags

			case "create-user":
				epf = userCreateUserFlags

			case "remove-user":
				epf = userRemoveUserFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "loan":
			c := loanc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list-loans":
				endpoint = c.ListLoans()
				data = nil
			case "get-loan":
				endpoint = c.GetLoan()
				data, err = loanc.BuildGetLoanPayload(*loanGetLoanIDFlag, *loanGetLoanViewFlag)
			}
		case "user":
			c := userc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list-users":
				endpoint = c.ListUsers()
				data = nil
			case "get-user":
				endpoint = c.GetUser()
				data, err = userc.BuildGetUserPayload(*userGetUserIDFlag, *userGetUserViewFlag)
			case "create-user":
				endpoint = c.CreateUser()
				data, err = userc.BuildCreateUserPayload(*userCreateUserBodyFlag)
			case "remove-user":
				endpoint = c.RemoveUser()
				data, err = userc.BuildRemoveUserPayload(*userRemoveUserIDFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// loanUsage displays the usage of the loan command and its subcommands.
func loanUsage() {
	fmt.Fprintf(os.Stderr, `The loan service makes it possible to view, add or remove loans
Usage:
    %s [globalflags] loan COMMAND [flags]

COMMAND:
    list-loans: List all stored loans
    get-loan: get loan by ID

Additional help:
    %s loan COMMAND --help
`, os.Args[0], os.Args[0])
}
func loanListLoansUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] loan list-loans

List all stored loans

Example:
    `+os.Args[0]+` loan list-loans
`, os.Args[0])
}

func loanGetLoanUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] loan get-loan -id INT -view STRING

get loan by ID
    -id INT: ID of loan to show
    -view STRING: 

Example:
    `+os.Args[0]+` loan get-loan --id 8603081991435869249 --view "default"
`, os.Args[0])
}

// userUsage displays the usage of the user command and its subcommands.
func userUsage() {
	fmt.Fprintf(os.Stderr, `The user service makes it possible to view, add or remove users
Usage:
    %s [globalflags] user COMMAND [flags]

COMMAND:
    list-users: List all stored users
    get-user: get user by ID
    create-user: create new user and return its ID.
    remove-user: Remove user

Additional help:
    %s user COMMAND --help
`, os.Args[0], os.Args[0])
}
func userListUsersUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user list-users

List all stored users

Example:
    `+os.Args[0]+` user list-users
`, os.Args[0])
}

func userGetUserUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user get-user -id STRING -view STRING

get user by ID
    -id STRING: ID of user to show
    -view STRING: 

Example:
    `+os.Args[0]+` user get-user --id "Voluptas quae rem." --view "tiny"
`, os.Args[0])
}

func userCreateUserUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user create-user -body JSON

create new user and return its ID.
    -body JSON: 

Example:
    `+os.Args[0]+` user create-user --body '{
      "email": "jhon@doe.com",
      "id": 1,
      "name": "Jesse owens",
      "score": 100
   }'
`, os.Args[0])
}

func userRemoveUserUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user remove-user -id STRING

Remove user
    -id STRING: ID of user to remove

Example:
    `+os.Args[0]+` user remove-user --id "Nam necessitatibus aperiam non."
`, os.Args[0])
}
