// Code generated by goa v3.4.3, DO NOT EDIT.
//
// user HTTP server types
//
// Command:
// $ goa gen github.com/mateeullahmalik/goa-demo/api/design

package server

import (
	"unicode/utf8"

	user "github.com/mateeullahmalik/goa-demo/api/gen/user"
	userviews "github.com/mateeullahmalik/goa-demo/api/gen/user/views"
	goa "goa.design/goa/v3/pkg"
)

// CreateUserRequestBody is the type of the "user" service "createUser"
// endpoint HTTP request body.
type CreateUserRequestBody struct {
	// ID is the unique id of the user.
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Full Name of the user
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// email address of user
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// Score is user's loan score
	Score *int `form:"score,omitempty" json:"score,omitempty" xml:"score,omitempty"`
}

// UserResponseTinyCollection is the type of the "user" service "listUsers"
// endpoint HTTP response body.
type UserResponseTinyCollection []*UserResponseTiny

// GetUserResponseBody is the type of the "user" service "getUser" endpoint
// HTTP response body.
type GetUserResponseBody struct {
	// ID is the unique id of the user.
	ID int `form:"id" json:"id" xml:"id"`
	// Score is user's loan score
	Score *int `form:"score,omitempty" json:"score,omitempty" xml:"score,omitempty"`
	// Full Name of the user
	Name string `form:"name" json:"name" xml:"name"`
	// email address of user
	Email string `form:"email" json:"email" xml:"email"`
}

// GetUserResponseBodyTiny is the type of the "user" service "getUser" endpoint
// HTTP response body.
type GetUserResponseBodyTiny struct {
	// ID is the unique id of the user.
	ID int `form:"id" json:"id" xml:"id"`
	// Full Name of the user
	Name string `form:"name" json:"name" xml:"name"`
}

// GetUserNotFoundResponseBody is the type of the "user" service "getUser"
// endpoint HTTP response body for the "not_found" error.
type GetUserNotFoundResponseBody struct {
	// Message of error
	Message string `form:"message" json:"message" xml:"message"`
	// ID of missing resource
	ID string `form:"id" json:"id" xml:"id"`
}

// UserResponseTiny is used to define fields on response body types.
type UserResponseTiny struct {
	// ID is the unique id of the user.
	ID int `form:"id" json:"id" xml:"id"`
	// Full Name of the user
	Name string `form:"name" json:"name" xml:"name"`
}

// NewUserResponseTinyCollection builds the HTTP response body from the result
// of the "listUsers" endpoint of the "user" service.
func NewUserResponseTinyCollection(res userviews.UserCollectionView) UserResponseTinyCollection {
	body := make([]*UserResponseTiny, len(res))
	for i, val := range res {
		body[i] = marshalUserviewsUserViewToUserResponseTiny(val)
	}
	return body
}

// NewGetUserResponseBody builds the HTTP response body from the result of the
// "getUser" endpoint of the "user" service.
func NewGetUserResponseBody(res *userviews.UserView) *GetUserResponseBody {
	body := &GetUserResponseBody{
		ID:    *res.ID,
		Name:  *res.Name,
		Email: *res.Email,
		Score: res.Score,
	}
	return body
}

// NewGetUserResponseBodyTiny builds the HTTP response body from the result of
// the "getUser" endpoint of the "user" service.
func NewGetUserResponseBodyTiny(res *userviews.UserView) *GetUserResponseBodyTiny {
	body := &GetUserResponseBodyTiny{
		ID:   *res.ID,
		Name: *res.Name,
	}
	return body
}

// NewGetUserNotFoundResponseBody builds the HTTP response body from the result
// of the "getUser" endpoint of the "user" service.
func NewGetUserNotFoundResponseBody(res *user.NotFound) *GetUserNotFoundResponseBody {
	body := &GetUserNotFoundResponseBody{
		Message: res.Message,
		ID:      res.ID,
	}
	return body
}

// NewGetUserPayload builds a user service getUser endpoint payload.
func NewGetUserPayload(id string, view *string) *user.GetUserPayload {
	v := &user.GetUserPayload{}
	v.ID = id
	v.View = view

	return v
}

// NewCreateUserUser builds a user service createUser endpoint payload.
func NewCreateUserUser(body *CreateUserRequestBody) *user.User {
	v := &user.User{
		ID:    *body.ID,
		Name:  *body.Name,
		Email: *body.Email,
		Score: body.Score,
	}

	return v
}

// NewRemoveUserPayload builds a user service removeUser endpoint payload.
func NewRemoveUserPayload(id string) *user.RemoveUserPayload {
	v := &user.RemoveUserPayload{}
	v.ID = id

	return v
}

// ValidateCreateUserRequestBody runs the validations defined on
// CreateUserRequestBody
func ValidateCreateUserRequestBody(body *CreateUserRequestBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 3, true))
		}
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 128, false))
		}
	}
	if body.Score != nil {
		if *body.Score < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.score", *body.Score, 0, true))
		}
	}
	if body.Score != nil {
		if *body.Score > 1000 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.score", *body.Score, 1000, false))
		}
	}
	return
}
