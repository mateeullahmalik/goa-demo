// Code generated by goa v3.4.3, DO NOT EDIT.
//
// user client HTTP transport
//
// Command:
// $ goa gen github.com/mateeullahmalik/goa-demo/api/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the user service endpoint HTTP clients.
type Client struct {
	// ListUsers Doer is the HTTP client used to make requests to the listUsers
	// endpoint.
	ListUsersDoer goahttp.Doer

	// GetUser Doer is the HTTP client used to make requests to the getUser
	// endpoint.
	GetUserDoer goahttp.Doer

	// CreateUser Doer is the HTTP client used to make requests to the createUser
	// endpoint.
	CreateUserDoer goahttp.Doer

	// RemoveUser Doer is the HTTP client used to make requests to the removeUser
	// endpoint.
	RemoveUserDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the user service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		ListUsersDoer:       doer,
		GetUserDoer:         doer,
		CreateUserDoer:      doer,
		RemoveUserDoer:      doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
	}
}

// ListUsers returns an endpoint that makes HTTP requests to the user service
// listUsers server.
func (c *Client) ListUsers() goa.Endpoint {
	var (
		decodeResponse = DecodeListUsersResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildListUsersRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListUsersDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("user", "listUsers", err)
		}
		return decodeResponse(resp)
	}
}

// GetUser returns an endpoint that makes HTTP requests to the user service
// getUser server.
func (c *Client) GetUser() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetUserRequest(c.encoder)
		decodeResponse = DecodeGetUserResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetUserRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetUserDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("user", "getUser", err)
		}
		return decodeResponse(resp)
	}
}

// CreateUser returns an endpoint that makes HTTP requests to the user service
// createUser server.
func (c *Client) CreateUser() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateUserRequest(c.encoder)
		decodeResponse = DecodeCreateUserResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildCreateUserRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateUserDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("user", "createUser", err)
		}
		return decodeResponse(resp)
	}
}

// RemoveUser returns an endpoint that makes HTTP requests to the user service
// removeUser server.
func (c *Client) RemoveUser() goa.Endpoint {
	var (
		decodeResponse = DecodeRemoveUserResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildRemoveUserRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.RemoveUserDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("user", "removeUser", err)
		}
		return decodeResponse(resp)
	}
}
